cmake_minimum_required(VERSION 3.16.0)
project(ncore)
SET(OpenCV_MIN_VERSION "4.2.0")

set(CMAKE_CXX_FLAGS "-std=c++11 -O3 -fopenmp -Wall ${CMAKE_CXX_FLAGS}")
set(CMAKE_CXX_STANDARD 14)

find_package(OpenMP)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()



find_package(Eigen3 REQUIRED)
if(Eigen3_FOUND)
  message(STATUS "Found OpenCV version ${Eigen3}")
  message(STATUS "OpenCV directories: ${Eigen3_INCLUDE_DIRS}")
  include_directories(${Eigen3_INCLUDE_DIRS})
else()
  message(FATAL_ERROR "Eigen3 not found, please read the README.md")
endif(Eigen3_FOUND)
set(pybind11_DIR /usr/local/lib/python3.10/dist-packages/)
set(PYTHON_INCLUDE_DIR "/usr/include/python3.10")
find_package (Python COMPONENTS Interpreter Development)
if(Python_FOUND)
  message(STATUS "Found Python version ${Python_VERSION}")
  include_directories(${PYTHON_INCLUDE_DIR})
endif(Python_FOUND)
find_package(pybind11 REQUIRED)


find_package(OpenCV ${OpenCV_MIN_VERSION} REQUIRED)
if(OpenCV_FOUND)
  message(STATUS "Found OpenCV version ${OpenCV_VERSION}")
  message(STATUS "OpenCV directories: ${OpenCV_INCLUDE_DIRS}")
  include_directories(${OpenCV_INCLUDE_DIRS})
else()
  message(FATAL_ERROR "OpenCV not found, please read the README.md")
endif(OpenCV_FOUND)


find_package(Boost COMPONENTS serialization system filesystem)
if(Boost_FOUND)
  message(STATUS "Found Boost version ${Boost_VERSION}")
  message(STATUS "Boost directories: ${Boost_INCLUDE_DIRS}")
  include_directories(${Boost_INCLUDE_DIRS})
else()
  message(FATAL_ERROR "Boost not found, please read the README.md")
endif(Boost_FOUND)

find_package(nlohmann_json 3.2.0 REQUIRED)
if(nlohmann_json_FOUND)
  message(STATUS "Found nlohmann_json")
else()
  message(FATAL_ERROR "nlohmann_json not found, please read the README.md")
endif(nlohmann_json_FOUND)

find_package(Armadillo REQUIRED)
include_directories(${ARMADILLO_INCLUDE_DIRS})
find_package(LAPACK REQUIRED)
include_directories(${LAPACK_INCLUDE_DIRS})

if(BUILD_TESTING)
	enable_testing()
	find_package(GTest REQUIRED)
	if(GTEST_FOUND)
	  message(STATUS "GTest directories: ${GTEST_INCLUDE_DIRS}")
	  include_directories(${GTEST_INCLUDE_DIRS})
	else()
	  message(FATAL_ERROR "GTEST_FOUND not found, please read the README.md")
	endif(GTEST_FOUND)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/lib/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../nlohmann_json/include/)

set(RESULTS_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/build)
file(MAKE_DIRECTORY ${RESULTS_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${RESULTS_OUTPUT_DIRECTORY}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${RESULTS_OUTPUT_DIRECTORY}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${RESULTS_OUTPUT_DIRECTORY}/bin)

add_subdirectory("src")
if(BUILD_TESTING)
  add_subdirectory("tst")
endif()

